def count_islands(matrix):
    
    if not matrix or not matrix[0]:
        return 0
    
    rows = len(matrix)
    cols = len(matrix[0])
    count = 0
    
    for i in range(rows):
        for j in range(cols):
            if matrix[i][j] == 1:
                count += 1
                _mark_island(matrix, i, j, rows, cols)
    
    return count

def _mark_island(matrix, i, j, rows, cols):
   
    if i < 0 or j < 0 or i >= rows or j >= cols or matrix[i][j] != 1:
        return
    
    matrix[i][j] = 0
    
    # Check all 8 possible directions
    directions = [(-1,-1), (-1,0), (-1,1),
                  (0,-1),          (0,1),
                  (1,-1),  (1,0),  (1,1)]
    
    for di, dj in directions:
        _mark_island(matrix, i + di, j + dj, rows, cols)

# Test Cases
if __name__ == "__main__":
    # Test Case 1: Single island
    matrix1 = [
        [1, 1, 0, 0],
        [0, 1, 0, 0],
        [0, 0, 1, 1],
        [0, 0, 1, 1]
    ]
    print("Test 1 - Expected: 2, Actual:", count_islands(matrix1))
    
    # Test Case 2: Diagonal islands
    matrix2 = [
        [1, 0, 0, 1],
        [0, 1, 0, 0],
        [0, 0, 1, 0],
        [1, 0, 0, 1]
    ]
    print("Test 2 - Expected: 5, Actual:", count_islands(matrix2))
    
    # Test Case 3: No islands
    matrix3 = [
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]
    ]
    print("Test 3 - Expected: 0, Actual:", count_islands(matrix3))
    
    # Test Case 4: One large island
    matrix4 = [
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]
    ]
    print("Test 4 - Expected: 1, Actual:", count_islands(matrix4))
